{"version":3,"sources":["components/Start.jsx","components/Option.jsx","components/QuizItem.jsx","components/Quiz.jsx","App.jsx","index.js"],"names":["Start","props","className","onClick","startQuiz","Option","isAnswerChecked","text","correctAnswer","isSelected","handleSelect","QuizItem","optionElements","options","map","option","answer","id","selectedOption","question","decodeHtml","html","txt","document","createElement","innerHTML","value","getOptions","optionObjects","nanoid","unshift","randIndex","Math","floor","random","length","Quiz","useState","quizzes","setQuizzes","setIsAnswerChecked","setCorrectAnswer","useEffect","fetchQuizzes","a","fetch","res","json","datas","results","data","correct_answer","incorrect_answers","quizId","currQuiz","QuizItems","quiz","sum","forEach","App","isPlaying","setIsPlaying","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.19f1bddf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Start(props) {\r\n  return (\r\n    <>\r\n      <h1 className=\"app-title\">Quizzical</h1>\r\n      <p className=\"app-description\">Quiz Game!!!</p>\r\n      <button className=\"startButton\" onClick={props.startQuiz}>\r\n        Start quiz\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Start;\r\n","import React from \"react\";\r\n\r\nfunction Option(props) {\r\n  return props.isAnswerChecked ? (\r\n    <div\r\n      className={`option answerChecked ${\r\n        props.text === props.correctAnswer\r\n          ? \"correct\"\r\n          : props.isSelected\r\n          ? \"wrong\"\r\n          : \"\"\r\n      }`}\r\n    >\r\n      {props.text}\r\n    </div>\r\n  ) : (\r\n    <div\r\n      className={`option ${props.isSelected ? \"selected\" : \"\"}`}\r\n      onClick={props.handleSelect}\r\n    >\r\n      {props.text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Option;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Option from \"./Option\";\r\n\r\nfunction QuizItem(props) {\r\n  const optionElements = props.options.map((option) => (\r\n    <Option\r\n      key={option.id}\r\n      isAnswerChecked={props.isAnswerChecked}\r\n      correctAnswer={props.answer}\r\n      handleSelect={() => props.handleSelect(props.id, option.text)}\r\n      isSelected={props.selectedOption === option.text ? true : false}\r\n      text={option.text}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <div className=\"quiz-item-container\">\r\n      <h3 className=\"quiz-question\">{props.question}</h3>\r\n\r\n      <div className=\"option-container\">{optionElements}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default QuizItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport \"./style.css\";\r\nimport QuizItem from \"./QuizItem\";\r\n\r\n// helper function to decode the data that got returned from fetch\r\nfunction decodeHtml(html) {\r\n  const txt = document.createElement(\"textarea\");\r\n  txt.innerHTML = html;\r\n  return txt.value;\r\n}\r\n\r\n// helper function to create option objects with id and text properties\r\nfunction getOptions(options, answer) {\r\n  let optionObjects = options.map((option) => ({\r\n    id: nanoid(),\r\n    text: decodeHtml(option),\r\n  }));\r\n  optionObjects.unshift({\r\n    id: nanoid(),\r\n    text: decodeHtml(answer),\r\n  });\r\n\r\n  const randIndex = Math.floor(Math.random() * optionObjects.length);\r\n  [optionObjects[0], optionObjects[randIndex]] = [\r\n    optionObjects[randIndex],\r\n    optionObjects[0],\r\n  ];\r\n\r\n  return optionObjects;\r\n}\r\n\r\nexport default function Quiz() {\r\n  const [quizzes, setQuizzes] = useState([]);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\r\n  const [correctAnswer, setCorrectAnswer] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchQuizzes();\r\n  }, []);\r\n\r\n  const fetchQuizzes = async () => {\r\n    const res = await fetch(\r\n      \"https://opentdb.com/api.php?amount=5&type=multiple\"\r\n    );\r\n    const datas = await res.json();\r\n\r\n    setQuizzes(\r\n      datas.results.map((data) => ({\r\n        id: nanoid(),\r\n        question: decodeHtml(data.question),\r\n        answer: decodeHtml(data.correct_answer),\r\n        options: getOptions(data.incorrect_answers, data.correct_answer),\r\n        selectedOption: null,\r\n      }))\r\n    );\r\n  };\r\n\r\n  const handleSelect = (quizId, text) => {\r\n    setQuizzes((currQuiz) => {\r\n      return currQuiz.map((quizzes) =>\r\n        quizzes.id === quizId ? { ...quizzes, selectedOption: text } : quizzes\r\n      );\r\n    });\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    setCorrectAnswer(() => {\r\n      let sum = 0;\r\n\r\n      quizzes.forEach((quiz) => {\r\n        if (quiz.selectedOption === quiz.answer) {\r\n          sum++;\r\n        }\r\n      });\r\n\r\n      return sum;\r\n    });\r\n    setIsAnswerChecked(true);\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setQuizzes([]);\r\n    setIsAnswerChecked(false);\r\n    fetchQuizzes();\r\n  };\r\n\r\n  const QuizItems = quizzes.map((quiz) => (\r\n    <QuizItem\r\n      key={quiz.id}\r\n      handleSelect={handleSelect}\r\n      isAnswerChecked={isAnswerChecked}\r\n      {...quiz}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"quizzes-container\">\r\n        {quizzes.length ? (\r\n          QuizItems\r\n        ) : (\r\n          <h1 className=\"loading-text\">Loading...</h1>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"button-container\">\r\n        {quizzes.length > 0 &&\r\n          (isAnswerChecked ? (\r\n            <>\r\n              <h3>You scored {`${correctAnswer}/${quizzes.length}`}</h3>\r\n              <button className=\"button\" onClick={resetGame}>\r\n                Play again\r\n              </button>\r\n            </>\r\n          ) : (\r\n            <button className=\"button\" onClick={checkAnswer}>\r\n              Check answers\r\n            </button>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Start from \"./components/Start\";\r\nimport Quiz from \"./components/Quiz\";\r\n\r\nfunction App() {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  const startQuiz = () => {\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"fullscreen-container\">\r\n      <div className=\"quiz-screen\">\r\n        {isPlaying ? <Quiz /> : <Start startQuiz={startQuiz} />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}